{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Pregnant tracker",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of pregnant tracker app"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://project-pregnant-back.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Diaries",
      "description": "Operations about diaries."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Emotions",
      "description": "Operations about emotions."
    },
    {
      "name": "Tasks",
      "description": "Operations about tasks."
    },
    {
      "name": "Users",
      "description": "Operations about users."
    },
    {
      "name": "Weeks",
      "description": "Operations about weeks."
    }
  ],
  "paths": {
    "/api/weeks/public/dashboard": {
      "get": {
        "tags": [
          "Weeks"
        ],
        "summary": "Public dashboard (week 1)",
        "operationId": "getPublicDashboard",
        "description": "Get week 1 dashboard info (no auth required)",
        "security": [],
        "responses": {
          "200": {
            "description": "Public dashboard response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weekNumber": {
                      "type": "integer",
                      "example": 1
                    },
                    "daysLeft": {
                      "type": "integer",
                      "example": 287
                    },
                    "baby": {
                      "$ref": "#/components/schemas/baby"
                    },
                    "mom": {
                      "$ref": "#/components/schemas/mom"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404-weeks"
          }
        }
      }
    },
    "/api/weeks/dashboard": {
      "get": {
        "tags": [
          "Weeks"
        ],
        "summary": "Private dashboard (current week from user)",
        "operationId": "getPrivateDashboard",
        "description": "Get dashboard info for the current pregnancy week of authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Private dashboard response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weekNumber": {
                      "type": "integer",
                      "example": 12
                    },
                    "daysLeft": {
                      "type": "integer",
                      "example": 200
                    },
                    "baby": {
                      "$ref": "#/components/schemas/baby"
                    },
                    "mom": {
                      "$ref": "#/components/schemas/mom"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-authenticate"
          },
          "404": {
            "$ref": "#/components/responses/404-weeks"
          }
        }
      }
    },
    "/api/weeks/{week}/baby": {
      "get": {
        "tags": [
          "Weeks"
        ],
        "summary": "Get baby development by week",
        "operationId": "getBabyByWeek",
        "description": "Get baby development info for a specific pregnancy week",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "week",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 42,
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Baby development info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/baby"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-weeks"
          },
          "401": {
            "$ref": "#/components/responses/401-authenticate"
          },
          "404": {
            "$ref": "#/components/responses/404-weeks"
          }
        }
      }
    },
    "/api/weeks/{week}/mom": {
      "get": {
        "tags": [
          "Weeks"
        ],
        "summary": "Get mom body by week",
        "operationId": "getMomByWeek",
        "description": "Get mom body info for a specific pregnancy week",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "week",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 42,
              "example": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mom body info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mom"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-weeks"
          },
          "401": {
            "$ref": "#/components/responses/401-authenticate"
          },
          "404": {
            "$ref": "#/components/responses/404-weeks"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "registerUser",
        "description": "User registration",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User name",
                    "type": "string",
                    "example": "Palilov Oleksandr"
                  },
                  "email": {
                    "description": "Unique email user",
                    "type": "string",
                    "example": "opalilovit@gmail.com"
                  },
                  "password": {
                    "description": "Unique password user",
                    "type": "string",
                    "example": "Osad998fjds"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/409-register"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Login user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "Registered email",
                    "type": "string",
                    "example": "opalilovit@gmail.com"
                  },
                  "password": {
                    "description": "Password entered during registration",
                    "type": "string",
                    "example": "Osad998fjds"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/accessToken"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-login"
          },
          "404": {
            "$ref": "#/components/responses/404-login"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh accessToken",
        "operationId": "refreshToken",
        "description": "Refresh accessToken",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Refresh accessToken",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/accessToken"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-refreshToken"
          },
          "404": {
            "$ref": "#/components/responses/404-refreshToken"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logout user and delete session",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logout user and delete session"
          },
          "401": {
            "$ref": "#/components/responses/401-authenticate"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users/currentUser": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Current user",
        "operationId": "currentUser",
        "description": "Information about the authorized current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the authorized current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found current user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404-login"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users/updateUserPhoto/{id}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Patch user photo by id",
        "operationId": "updatePhoto",
        "description": "Patched user avatar",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "description": "Link to contact`s photo",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Patched user avatar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully update avatar user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-updateUserPhoto"
          },
          "401": {
            "$ref": "#/components/responses/401-authenticate"
          },
          "404": {
            "$ref": "#/components/responses/404-login"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users/updateUserData/{id}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Patch user data by id",
        "operationId": "patchDataUser",
        "description": "Updating user data",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "User name",
                    "type": "string",
                    "example": "Palilov Oleksandr"
                  },
                  "email": {
                    "description": "Registered email",
                    "type": "string",
                    "example": "opalilovit@gmail.com"
                  },
                  "gender": {
                    "description": "Gender of the child",
                    "type": "string",
                    "enum": [
                      "boy",
                      "girl",
                      "I don`t know yet"
                    ]
                  },
                  "dueDate": {
                    "description": "Date before delivery in YYYY-MM-DD format",
                    "type": "string",
                    "example": "2025-09-29"
                  },
                  "photo": {
                    "description": "Link to user photo",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updating user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully update a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-authenticate"
          },
          "404": {
            "$ref": "#/components/responses/404-login"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/diaries": {
      "get": {
        "tags": [
          "Diaries"
        ],
        "summary": "Get all diary entries",
        "operationId": "getDiaries",
        "description": "Retrieve all diary entries for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Diaries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Diaries retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/diary"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Diaries"
        ],
        "summary": "Create a new diary entry",
        "operationId": "createDiary",
        "description": "Create a new diary entry",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "emotions"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "My new day"
                  },
                  "emotions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "64f0b81f5f4a5c3f1c2d3e4f"
                    }
                  },
                  "descr": {
                    "type": "string",
                    "example": "Walked in the park"
                  }
                },
                "example": {
                  "title": "My new day",
                  "emotions": [
                    "64f0b81f5f4a5c3f1c2d3e4f"
                  ],
                  "descr": "Walked in the park"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Diary created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Diary created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/diary"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/422_validationErrorDiary"
          }
        }
      }
    },
    "/api/diaries/{id}": {
      "patch": {
        "tags": [
          "Diaries"
        ],
        "summary": "Update an existing diary entry",
        "operationId": "updateDiary",
        "description": "Update a diary entry by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "64f0b81f5f4a5c3f1c2d3e4f"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Updated title"
                  },
                  "emotions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "64f0b81f5f4a5c3f1c2d3e4f"
                    }
                  },
                  "descr": {
                    "type": "string",
                    "example": "Updated description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Diary updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Diary updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/diary"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404_notFoundDiary"
          },
          "422": {
            "$ref": "#/components/responses/422_validationErrorDiary"
          }
        }
      },
      "delete": {
        "tags": [
          "Diaries"
        ],
        "summary": "Delete a diary entry",
        "operationId": "deleteDiary",
        "description": "Delete a diary entry by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "64f0b81f5f4a5c3f1c2d3e4f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Diary deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Diary deleted successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/diary"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404_notFoundDiary"
          }
        }
      }
    },
    "/api/emotions": {
      "get": {
        "tags": [
          "Emotions"
        ],
        "summary": "Get all available emotions",
        "operationId": "getEmotions",
        "security": [],
        "description": "Retrieve all emotions available for diary entries",
        "responses": {
          "200": {
            "description": "Successful retrieval of emotions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Список емоцій отримано"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emotion"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "baby": {
        "type": "object",
        "required": [
          "weekNumber",
          "babyDevelopment"
        ],
        "properties": {
          "weekNumber": {
            "type": "integer",
            "example": 12
          },
          "analogy": {
            "type": "string",
            "example": "Слива"
          },
          "babySize": {
            "type": "number",
            "example": 5.4
          },
          "babyWeight": {
            "type": "number",
            "example": 14
          },
          "image": {
            "type": "string",
            "example": "https://ftp.goit.study/img/lehlehka/example.webp"
          },
          "babyActivity": {
            "type": "string",
            "example": "Малюк вже вміє стискати кулачки"
          },
          "babyDevelopment": {
            "type": "string",
            "example": "Розвиваються рефлекси"
          },
          "interestingFact": {
            "type": "string",
            "example": "На пальчиках з'являються відбитки"
          },
          "momDailyTips": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Пийте більше води",
              "Робіть вправи Кегеля"
            ]
          }
        }
      },
      "mom": {
        "type": "object",
        "required": [
          "weekNumber",
          "bodyChanges"
        ],
        "properties": {
          "weekNumber": {
            "type": "integer",
            "example": 12
          },
          "bodyChanges": {
            "type": "string",
            "example": "З'являється животик"
          },
          "healthTips": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Більше відпочивай",
              "Харчуйся правильно"
            ]
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "Resource not found"
          }
        }
      },
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "gender"
        ],
        "properties": {
          "_id": {
            "description": "Unique user id",
            "type": "string",
            "example": "65ca67e7ae7f10c88b598384"
          },
          "name": {
            "description": "User name",
            "type": "string",
            "example": "Palilov Oleksandr"
          },
          "email": {
            "description": "Unique user email",
            "type": "string",
            "example": "opalilovit@gmail.com"
          },
          "gender": {
            "description": "Gender of the child",
            "type": "string",
            "enum": [
              "boy",
              "girl",
              "I don`t know yet"
            ]
          },
          "dueDate": {
            "description": "Date before delivery in YYYY-MM-DD format",
            "type": "string",
            "example": "2025-09-29"
          },
          "photo": {
            "description": "Link to user photo",
            "type": "string",
            "example": "https://res.cloudinary.com/dlu3qdnnl/image/upload/v1758449184/enkftravm5gadbzc3ssk.jpg"
          }
        }
      },
      "accessToken": {
        "type": "object",
        "required": [
          "accessToken"
        ],
        "properties": {
          "accessToken": {
            "description": "Specially generated token",
            "type": "string",
            "example": "jLMXnAqZnuLfjgUA3sF95pmmAES"
          }
        }
      },
      "emotion": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64f0b81f5f4a5c3f1c2d3e40"
          },
          "title": {
            "type": "string",
            "example": "Happy"
          }
        }
      },
      "diary": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64f0b81f5f4a5c3f1c2d3e4f"
          },
          "title": {
            "type": "string",
            "example": "My day summary"
          },
          "descr": {
            "type": "string",
            "example": "Walked in the park, read a book."
          },
          "emotions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emotion"
            }
          },
          "userId": {
            "type": "string",
            "example": "64f0b81f5f4a5c3f1c2d3e4a"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-09-22T12:34:56.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-09-22T12:35:01.000Z"
          }
        }
      }
    },
    "responses": {
      "500": {
        "description": "Something went wrong.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong."
                },
                "data": {
                  "type": "string",
                  "example": "Detailed error message (visible only in development)"
                }
              }
            }
          }
        }
      },
      "404-weeks": {
        "description": "Not found errors",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "publicDashboardNotFound": {
                "summary": "Public dashboard data missing",
                "value": {
                  "status": 404,
                  "message": "Data not found for public dashboard"
                }
              },
              "weekNotFound": {
                "summary": "Week data missing",
                "value": {
                  "status": 404,
                  "message": "Data not found for this week"
                }
              },
              "babyNotFound": {
                "summary": "Baby state missing",
                "value": {
                  "status": 404,
                  "message": "Baby development not found"
                }
              },
              "momNotFound": {
                "summary": "Mom state missing",
                "value": {
                  "status": 404,
                  "message": "Mom state not found"
                }
              }
            }
          }
        }
      },
      "401-authenticate": {
        "description": "Authentication errors",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "string",
                  "example": "Authenticate error"
                }
              }
            },
            "examples": {
              "AuthHeaderMissing": {
                "summary": "Authorization header is missing",
                "value": {
                  "status": 401,
                  "message": "Something went wrong",
                  "data": "Authorization header is missing."
                }
              },
              "InvalidAuthFormat": {
                "summary": "Invalid authorization format",
                "value": {
                  "status": 401,
                  "message": "Something went wrong",
                  "data": "Invalid authorization format. Must be \"Bearer <token>\"."
                }
              },
              "SessionNotFound": {
                "summary": "Session not found",
                "value": {
                  "status": 401,
                  "message": "Something went wrong",
                  "data": "Session not found."
                }
              },
              "RefreshTokenExpired": {
                "summary": "Refresh token expired",
                "value": {
                  "status": 401,
                  "message": "Something went wrong",
                  "data": "Refresh token expired."
                }
              },
              "UserNotFound": {
                "summary": "User not found or deleted",
                "value": {
                  "status": 401,
                  "message": "Something went wrong",
                  "data": "User not found or deleted."
                }
              }
            }
          }
        }
      },
      "400-weeks": {
        "description": "Invalid week number. Must be between 1 and 42.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Invalid week number. Must be between 1 and 42."
                }
              }
            }
          }
        }
      },
      "409-register": {
        "description": "Email in use",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "string",
                  "example": "Email in use"
                }
              }
            }
          }
        }
      },
      "401-login": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          }
        }
      },
      "404-login": {
        "description": "User not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          }
        }
      },
      "401-refreshToken": {
        "description": "Session token expired",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "string",
                  "example": "Session token expired"
                }
              }
            }
          }
        }
      },
      "404-refreshToken": {
        "description": "Session not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "string",
                  "example": "Session not found"
                }
              }
            }
          }
        }
      },
      "400-updateUserPhoto": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "string",
                  "example": "Bad request"
                }
              }
            },
            "examples": {
              "NoFileUploaded": {
                "summary": "No photo file was uploaded",
                "value": {
                  "status": 400,
                  "message": "Something went wrong",
                  "data": "No file uploaded!"
                }
              },
              "OnlyPhotoFileAllowed": {
                "summary": "Request body contains data other than a photo file",
                "value": {
                  "status": 400,
                  "message": "Something went wrong",
                  "data": "Only a photo file can be uploaded."
                }
              }
            }
          }
        }
      },
      "422_validationErrorDiary": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 422
                },
                "message": {
                  "type": "string",
                  "example": "At least one emotion is required"
                }
              }
            }
          }
        }
      },
      "404_notFoundDiary": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Diary entry not found"
                }
              }
            }
          }
        }
      }
    }
  }
}